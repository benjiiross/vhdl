$date
  Sun Apr 09 09:37:25 2023
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$var reg 2 ! sr_in[1:0] $end
$var reg 4 " a[3:0] $end
$var reg 4 # b[3:0] $end
$var reg 1 $ reset $end
$var reg 1 % clk $end
$var reg 4 & sel_fct[3:0] $end
$var reg 4 ' sel_route[3:0] $end
$var reg 2 ( sel_out[1:0] $end
$var reg 8 ) s[7:0] $end
$var reg 2 * sr_out[1:0] $end
$scope module alu_tb $end
$var reg 2 + sr_in[1:0] $end
$var reg 4 , a_in[3:0] $end
$var reg 4 - b_in[3:0] $end
$var reg 1 . reset $end
$var reg 1 / clk $end
$var reg 4 0 sel_fct[3:0] $end
$var reg 4 1 sel_route[3:0] $end
$var reg 2 2 sel_out[1:0] $end
$var reg 8 3 res_out[7:0] $end
$var reg 2 4 sr_out[1:0] $end
$var reg 8 5 mem_cache_1_in[7:0] $end
$var reg 8 6 mem_cache_1_out[7:0] $end
$var reg 1 7 mem_cache_1_set $end
$var reg 8 8 mem_cache_2_in[7:0] $end
$var reg 8 9 mem_cache_2_out[7:0] $end
$var reg 1 : mem_cache_2_set $end
$var reg 4 ; alu_a[3:0] $end
$var reg 4 < alu_b[3:0] $end
$var reg 8 = alu_s[7:0] $end
$scope module mem_cache_1 $end
$var reg 1 > clk $end
$var reg 1 ? reset $end
$var reg 8 @ input[7:0] $end
$var reg 1 A set $end
$var reg 8 B output[7:0] $end
$upscope $end
$scope module mem_cache_2 $end
$var reg 1 C clk $end
$var reg 1 D reset $end
$var reg 8 E input[7:0] $end
$var reg 1 F set $end
$var reg 8 G output[7:0] $end
$upscope $end
$scope module b_alu $end
$var reg 4 H sel_fct[3:0] $end
$var reg 2 I sr_in[1:0] $end
$var reg 4 J a[3:0] $end
$var reg 4 K b[3:0] $end
$var reg 1 L reset $end
$var reg 1 M clk $end
$var reg 2 N sr_out[1:0] $end
$var reg 8 O s[7:0] $end
$var reg 4 P a_buf[3:0] $end
$var reg 4 Q b_buf[3:0] $end
$var reg 2 R sr_in_buf[1:0] $end
$scope module buffer_a $end
$var reg 1 S clk $end
$var reg 1 T reset $end
$var reg 4 U input[3:0] $end
$var reg 4 V output[3:0] $end
$upscope $end
$scope module buffer_b $end
$var reg 1 W clk $end
$var reg 1 X reset $end
$var reg 4 Y input[3:0] $end
$var reg 4 Z output[3:0] $end
$upscope $end
$scope module buffer_sr_in $end
$var reg 1 [ clk $end
$var reg 1 \ reset $end
$var reg 2 ] input[1:0] $end
$var reg 2 ^ output[1:0] $end
$upscope $end
$scope module alu1 $end
$var reg 4 _ sel_fct[3:0] $end
$var reg 2 ` sr_in[1:0] $end
$var reg 4 a a[3:0] $end
$var reg 4 b b[3:0] $end
$var reg 1 c reset $end
$var reg 1 d clk $end
$var reg 2 e sr_out[1:0] $end
$var reg 8 f s[7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b00 !
b0000 "
b0000 #
0$
0%
b0000 &
b0000 '
b00 (
b00000000 )
b00 *
b00 +
b0000 ,
b0000 -
0.
0/
b0000 0
b0000 1
b00 2
b00000000 3
b00 4
b00000000 5
b00000000 6
07
b00000000 8
b00000000 9
0:
b0000 ;
b0000 <
b00000000 =
0>
0?
b00000000 @
0A
b00000000 B
0C
0D
b00000000 E
0F
b00000000 G
b0000 H
b00 I
b0000 J
b0000 K
0L
0M
b00 N
b00000000 O
b0000 P
b0000 Q
b00 R
0S
0T
b0000 U
b0000 V
0W
0X
b0000 Y
b0000 Z
0[
0\
b00 ]
b00 ^
b0000 _
b00 `
b0000 a
b0000 b
0c
0d
b00 e
b00000000 f
#5000000
b1111 #
1%
b0001 '
b1111 -
1/
b0001 1
b1111 <
1>
1C
b1111 K
1M
1S
1W
b1111 Y
1[
1d
#10000000
0%
0/
0>
0C
0M
b1111 Q
0S
0W
b1111 Z
0[
b1111 b
0d
#15000000
b0100 "
1%
b1100 &
b0000 '
b11 (
b0100 ,
1/
b1100 0
b0000 1
b11 2
b0100 ;
1>
1C
b1100 H
b0100 J
1M
1S
b0100 U
1W
1[
b1100 _
1d
#20000000
0%
0/
0>
0C
0M
b0100 P
0S
b0100 V
0W
0[
b0100 a
0d
#25000000
1%
1/
1>
1C
1M
1S
1W
1[
1d
#30000000
0%
0/
b00111100 =
0>
0C
0M
b00111100 O
0S
0W
0[
0d
b00111100 f
#35000000
1%
b00111100 )
1/
b00111100 3
1>
1C
1M
1S
1W
1[
1d
#40000000
0%
0/
0>
0C
0M
0S
0W
0[
0d
#45000000
1%
1/
1>
1C
1M
1S
1W
1[
1d
#50000000
0%
0/
0>
0C
0M
0S
0W
0[
0d
#55000000
1%
1/
1>
1C
1M
1S
1W
1[
1d
#60000000
0%
0/
0>
0C
0M
0S
0W
0[
0d
